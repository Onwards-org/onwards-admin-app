{
  "permissions": {
    "allow": [
      "Bash(pkill:*)",
      "Bash(npm install)",
      "Bash(npm run dev:server:*)",
      "Bash(tsx:*)",
      "Bash(npm rebuild:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm install:*)",
      "Bash(rm:*)",
      "Bash(npm run dev:client:*)",
      "Bash(sudo rm:*)",
      "Bash(ls:*)",
      "Bash(./node_modules/.bin/vite:*)",
      "Bash(curl:*)",
      "Bash(kill:*)",
      "Bash(npm run dev:clean:*)",
      "Bash(npm run dev:detached:*)",
      "Bash(npm run dev:status:*)",
      "Bash(npm run dev:health:*)",
      "Bash(npm run dev:restart:*)",
      "Bash(npm run dev:ports:*)",
      "Bash(npm run dev:stop:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run build:client:*)",
      "Bash(grep:*)",
      "Bash(cat:*)",
      "Bash(ss:*)",
      "Bash(npx tsc:*)",
      "Bash(timeout 3 tsx src/server/index.ts 2>&1)",
      "Bash(node:*)",
      "Bash(timeout 3 curl -s http://localhost:3001/api/health)",
      "Bash(timeout 3 curl -s http://localhost:808)",
      "Bash(true)",
      "Bash(mkdir:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run lint:*)",
      "Bash(psql:*)",
      "Bash(touch:*)",
      "Bash(fuser:*)",
      "Bash(npx tsx:*)",
      "Bash(sed:*)",
      "Bash(mv:*)",
      "Bash(find:*)",
      "Bash(cut:*)",
      "Bash(ip route:*)",
      "Bash(hostname:*)",
      "Bash(rg:*)",
      "Bash(jobs)",
      "Bash(npm run build:*)",
      "Bash(sudo service:*)",
      "Bash(TZ=UTC date '+%Y-%m-%d')",
      "Bash(echo)",
      "Bash(sqlite3:*)",
      "Bash(sudo pkill:*)",
      "Bash(echo $PORT)",
      "Bash(chmod:*)",
      "Bash(timeout 15 npm run dev)",
      "Bash(timeout 10 npm run dev:detached)",
      "Bash(# Start a simple process on port 3001\npython3 -c \"\"\nimport socket\nimport time\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((''localhost'', 3001))\ns.listen(1)\nprint(''Port 3001 is now blocked'')\ntime.sleep(20)\n\"\" &\nBLOCKPID=$!\necho \"\"Blocker PID: $BLOCKPID\"\"\nsleep 2\n\n# Try to start our backend\necho \"\"Testing tsx with blocked port...\"\"\ntsx src/server/index.ts 2>&1 | head -10\n\n# Clean up\nkill $BLOCKPID 2>/dev/null || true)",
      "Bash(# Start a simple HTTP server on port 8080\npython3 -m http.server 8080 &\nVITE_BLOCKER=$!\necho \"\"Started vite port blocker PID: $VITE_BLOCKER\"\"\nsleep 2\n\n# Try to start Vite\necho \"\"Testing vite with blocked port 8080...\"\"\ncd src/client\ntimeout 10 npx vite --host --port 8080 --strict-port 2>&1 || echo \"\"Vite test completed\"\"\ncd ../..\n\n# Clean up\nkill $VITE_BLOCKER 2>/dev/null || true)",
      "Bash(# Create a quick test to verify backend port conflict detection\necho \"\"Testing backend port conflict detection...\"\"\n\n# Start port blocker\npython3 -m http.server 3001 &\nBACKEND_BLOCKER=$!\nsleep 2\n\n# Test our backend server\necho \"\"Attempting to start backend with port 3001 blocked...\"\"\nNODE_ENV=development tsx src/server/index.ts 2>&1 | head -20\n\n# Clean up\nkill $BACKEND_BLOCKER 2>/dev/null || true)",
      "Bash(timeout 10 npx vite --host --port 8080)",
      "Bash(npx vite:*)",
      "Bash(timeout 10 npx vite --host --port 8080 --clearScreen false)",
      "Bash(echo:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(timeout 10 tsx src/server/index.ts)",
      "Bash(sudo fuser:*)",
      "Bash(pkill -9 -f \"vite\")",
      "Bash(pkill -9 -f \"tsx\")",
      "Bash(git push:*)",
      "Bash(npm run restart:*)",
      "Bash(timeout 30 npx tsx src/server/index.ts)",
      "Bash(timeout 10 npx tsx src/server/index.ts)",
      "Bash(git config:*)",
      "Bash(systemctl:*)",
      "Bash(pm2 list:*)",
      "Bash(pm2 stop:*)",
      "Bash(pm2 delete:*)",
      "Bash(tsc:*)",
      "Bash(cp:*)",
      "Bash(npm run prod:start:*)",
      "Bash(timeout:*)",
      "Bash(npm run:*)",
      "Bash(sudo systemctl:*)",
      "Bash(sudo certbot:*)",
      "Bash(nslookup:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(sudo tail:*)",
      "Bash(sudo mkdir:*)",
      "Bash(sudo openssl req:*)",
      "Bash(sudo cp:*)",
      "Bash(sudo nginx:*)"
    ],
    "deny": []
  }
}